//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Questionnaires.Core.BusinessObjects
{
    public partial class Question 
    {
        #region Primitive Properties
    
        public virtual int QuestionID
        {
            get;
            set;
        }
    
        public virtual string Explanation
        {
            get;
            set;
        }
    
        public virtual string QuestionText
        {
            get;
            set;
        }
    
        public virtual string QuestionGroup
        {
            get;
            set;
        }
    
        public virtual bool Required
        {
            get;
            set;
        }
    
        public virtual string Label
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AnswerOption> AnswerOptions
        {
            get
            {
                if (_answerOptions == null)
                {
                    var newCollection = new FixupCollection<AnswerOption>();
                    newCollection.CollectionChanged += FixupAnswerOptions;
                    _answerOptions = newCollection;
                }
                return _answerOptions;
            }
            set
            {
                if (!ReferenceEquals(_answerOptions, value))
                {
                    var previousValue = _answerOptions as FixupCollection<AnswerOption>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswerOptions;
                    }
                    _answerOptions = value;
                    var newValue = value as FixupCollection<AnswerOption>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswerOptions;
                    }
                }
            }
        }
        private ICollection<AnswerOption> _answerOptions;
    
        public virtual ICollection<QuestionSetQuestion> QuestionSetQuestions
        {
            get
            {
                if (_questionSetQuestions == null)
                {
                    var newCollection = new FixupCollection<QuestionSetQuestion>();
                    newCollection.CollectionChanged += FixupQuestionSetQuestions;
                    _questionSetQuestions = newCollection;
                }
                return _questionSetQuestions;
            }
            set
            {
                if (!ReferenceEquals(_questionSetQuestions, value))
                {
                    var previousValue = _questionSetQuestions as FixupCollection<QuestionSetQuestion>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupQuestionSetQuestions;
                    }
                    _questionSetQuestions = value;
                    var newValue = value as FixupCollection<QuestionSetQuestion>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupQuestionSetQuestions;
                    }
                }
            }
        }
        private ICollection<QuestionSetQuestion> _questionSetQuestions;
    
        public virtual ICollection<AnswerSet> AnswerSets
        {
            get
            {
                if (_answerSets == null)
                {
                    var newCollection = new FixupCollection<AnswerSet>();
                    newCollection.CollectionChanged += FixupAnswerSets;
                    _answerSets = newCollection;
                }
                return _answerSets;
            }
            set
            {
                if (!ReferenceEquals(_answerSets, value))
                {
                    var previousValue = _answerSets as FixupCollection<AnswerSet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswerSets;
                    }
                    _answerSets = value;
                    var newValue = value as FixupCollection<AnswerSet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswerSets;
                    }
                }
            }
        }
        private ICollection<AnswerSet> _answerSets;
    
        public virtual ICollection<Answer> Answers
        {
            get
            {
                if (_answers == null)
                {
                    var newCollection = new FixupCollection<Answer>();
                    newCollection.CollectionChanged += FixupAnswers;
                    _answers = newCollection;
                }
                return _answers;
            }
            set
            {
                if (!ReferenceEquals(_answers, value))
                {
                    var previousValue = _answers as FixupCollection<Answer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswers;
                    }
                    _answers = value;
                    var newValue = value as FixupCollection<Answer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswers;
                    }
                }
            }
        }
        private ICollection<Answer> _answers;
    
        public virtual ICollection<AnswerSetHistory> AnswerSetHistories
        {
            get
            {
                if (_answerSetHistories == null)
                {
                    var newCollection = new FixupCollection<AnswerSetHistory>();
                    newCollection.CollectionChanged += FixupAnswerSetHistories;
                    _answerSetHistories = newCollection;
                }
                return _answerSetHistories;
            }
            set
            {
                if (!ReferenceEquals(_answerSetHistories, value))
                {
                    var previousValue = _answerSetHistories as FixupCollection<AnswerSetHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswerSetHistories;
                    }
                    _answerSetHistories = value;
                    var newValue = value as FixupCollection<AnswerSetHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswerSetHistories;
                    }
                }
            }
        }
        private ICollection<AnswerSetHistory> _answerSetHistories;

        #endregion
        #region Association Fixup
    
        private void FixupAnswerOptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AnswerOption item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnswerOption item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }
    
        private void FixupQuestionSetQuestions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (QuestionSetQuestion item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuestionSetQuestion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }
    
        private void FixupAnswerSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AnswerSet item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnswerSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }
    
        private void FixupAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Answer item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Answer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }
    
        private void FixupAnswerSetHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AnswerSetHistory item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AnswerSetHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }

        #endregion
    }
}
