//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Questionnaires.Core.BusinessObjects.Interfaces;
using System.Collections.Generic;
using Questionnaires.Core.BusinessObjects;

namespace Questionnaires.DAL
{
    public partial class QuestionnaireEntities : DbContext
    {
        public QuestionnaireEntities()
            : base("name=QuestionnaireEntities")
        {
    		//Hooking up an event to mark existing entities as Unchanged when they are loaded		
    		((IObjectContextAdapter)this).ObjectContext.ObjectMaterialized += (sender, args) =>
            {
                    var entity = args.Entity as IObjectWithState;
                    if (entity != null )
                    {
                        entity.State = State.Unchanged;
    					//if( ((System.Data.Objects.ObjectContext)sender).ContextOptions.ProxyCreationEnabled )
    						//entity.OriginalValues = BuildOriginalValues(this.Entry(entity).OriginalValues);
                    }
            };
        }
    
    	private static Dictionary<string, object> BuildOriginalValues(DbPropertyValues originalValues)
    	{
    		var result = new Dictionary<string, object>();
    		foreach (var propertyName in originalValues.PropertyNames)
    		{
    			var value = originalValues[propertyName];
    			if (value is DbPropertyValues)
    			{
    				result[propertyName] = BuildOriginalValues((DbPropertyValues)value);
    			}
    			else
    			{
    				result[propertyName] = value;
    			}
    		}
    		return result;
    	}
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public IDbSet<AnswerOption> AnswerOptions { get; set; }
        public IDbSet<Condition> Conditions { get; set; }
        public IDbSet<Question> Questions { get; set; }
        public IDbSet<QuestionSetQuestion> QuestionSetQuestions { get; set; }
        public IDbSet<QuestionSet> QuestionSets { get; set; }
        public IDbSet<QuestionnaireQuestionSet> QuestionnaireQuestionSets { get; set; }
        public IDbSet<Questionnaire> Questionnaires { get; set; }
        public IDbSet<AnswerSet> AnswerSets { get; set; }
        public IDbSet<Answer> Answers { get; set; }
        public IDbSet<AnswerSetHistory> AnswerSetHistories { get; set; }
    }
}
