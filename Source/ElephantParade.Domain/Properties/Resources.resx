<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ParticipantPostalCodeLabelText" xml:space="preserve">
    <value>Postcode</value>
  </data>
  <data name="PatientAddressLabelText" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="PatientDisplayNameLabelText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PatientDOBLabelText" xml:space="preserve">
    <value>DOB</value>
  </data>
  <data name="PatientEmailLabelText" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="PatientForenameLabelText" xml:space="preserve">
    <value>Forename</value>
  </data>
  <data name="PatientMobileLabelText" xml:space="preserve">
    <value>Mobile</value>
  </data>
  <data name="PatientNhsNumberLabelText" xml:space="preserve">
    <value>NHS Number</value>
  </data>
  <data name="PatientRegisteredDateLabelText" xml:space="preserve">
    <value>Registered Date</value>
  </data>
  <data name="PatientSurnameLabelText" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="PatientTelephoneLabelText" xml:space="preserve">
    <value>Telephone Number</value>
  </data>
  <data name="PatientTitleLabelText" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="PatientDisplayNameRequired" xml:space="preserve">
    <value>Display Name Required</value>
  </data>
  <data name="PatientForenameRequired" xml:space="preserve">
    <value>Forename Required</value>
  </data>
  <data name="PatientNhsNumberRequired" xml:space="preserve">
    <value>NHS Number Required</value>
  </data>
  <data name="PatientSurnameRequired" xml:space="preserve">
    <value>Surname Required</value>
  </data>
  <data name="PatientTelephoneNumberMobileLabelText" xml:space="preserve">
    <value>Mobile Number</value>
  </data>
  <data name="PatientGenderLabelText" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="PatientTelephoneNumberOtherLabelText" xml:space="preserve">
    <value>Work Number</value>
  </data>
  <data name="Address1LabelText" xml:space="preserve">
    <value>Address 1</value>
  </data>
  <data name="PatientEthnicityLabelText" xml:space="preserve">
    <value>Ethnicity</value>
  </data>
  <data name="PatientForenameStringLengthValidationError" xml:space="preserve">
    <value>Forename too long</value>
  </data>
  <data name="PatientSurnameStringLengthValidationError" xml:space="preserve">
    <value>Surname too long</value>
  </data>
  <data name="PatientTitleStringLengthValidationError" xml:space="preserve">
    <value>Title too long</value>
  </data>
  <data name="AddressPostalCodeLabelText" xml:space="preserve">
    <value>Postcode</value>
  </data>
  <data name="PostalCodeStringLengthValidationError" xml:space="preserve">
    <value>Postcode too long</value>
  </data>
  <data name="Address2LabelText" xml:space="preserve">
    <value>Address 2</value>
  </data>
  <data name="Address3LabelText" xml:space="preserve">
    <value>Address 3</value>
  </data>
  <data name="AddressCountryLabelText" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="AddressCountyLabelText" xml:space="preserve">
    <value>Address 3</value>
  </data>
  <data name="PatientPrederredContactTimeLabelText" xml:space="preserve">
    <value>Preferred contact time</value>
  </data>
  <data name="PatientPreferredContactNumberTypeLabelText" xml:space="preserve">
    <value>Preferred Contact Number</value>
  </data>
  <data name="MedicationDoseLabelText" xml:space="preserve">
    <value>Dose</value>
  </data>
  <data name="MedicationfrequencyLabelText" xml:space="preserve">
    <value>Frequency</value>
  </data>
  <data name="MedicationNameLabelText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="MedicationTypeLabelText" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="MedicationTypeRequiredText" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="MedicationTypeRequired" xml:space="preserve">
    <value>Type Required</value>
  </data>
  <data name="PatientDisplayNameStringLengthValidationError" xml:space="preserve">
    <value>Display name length</value>
  </data>
  <data name="PatientBaselineGAD7TypeLabelText" xml:space="preserve">
    <value>Baseline GAD7</value>
  </data>
  <data name="PatientBaselinePHQ9LabelText" xml:space="preserve">
    <value>Baseline PHQ9</value>
  </data>
  <data name="PatientOnAntidepressantsTypeLabelText" xml:space="preserve">
    <value>On Antidepressants</value>
  </data>
  <data name="EmailAddressRequired" xml:space="preserve">
    <value>Email Required</value>
  </data>
  <data name="GPAddressLabelText" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="GPEmailLabelText" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="GPNameLabelText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="GPPracticeLabelText" xml:space="preserve">
    <value>Practice</value>
  </data>
  <data name="GPPrimaryCareTrustLabelText" xml:space="preserve">
    <value>Primary Care Trust</value>
  </data>
  <data name="GPTelephoneLabelText" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="EmailAddressInvalid" xml:space="preserve">
    <value>Invalid Email</value>
  </data>
  <data name="DOBInvalid" xml:space="preserve">
    <value>Invalid DOB</value>
  </data>
  <data name="PatientTitleRequired" xml:space="preserve">
    <value>Title Required</value>
  </data>
  <data name="MedicationDoseRequiredText" xml:space="preserve">
    <value>Dose Required</value>
  </data>
  <data name="MedicationfrequencyRequiredText" xml:space="preserve">
    <value>Frequency Required</value>
  </data>
  <data name="PatientStatusLabelText" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="EducationLabelText" xml:space="preserve">
    <value>Education</value>
  </data>
  <data name="StudyConsentedDateLabelText" xml:space="preserve">
    <value>Consented</value>
  </data>
  <data name="StudyReferralDateLabelText" xml:space="preserve">
    <value>Date Referred</value>
  </data>
  <data name="StudySiteLabelText" xml:space="preserve">
    <value>Site</value>
  </data>
  <data name="StudyTrialNumberLabelText" xml:space="preserve">
    <value>TrialID</value>
  </data>
  <data name="PatientNhsNumberStringLengthValidationError" xml:space="preserve">
    <value>Length Validation Error</value>
  </data>
  <data name="StudyIdRequired" xml:space="preserve">
    <value>StudyID Required</value>
  </data>
  <data name="ExistingEmailAddressInvalid" xml:space="preserve">
    <value>The existing email address is invalid</value>
  </data>
  <data name="ExistingEmailAddressRequired" xml:space="preserve">
    <value>The existing email address is required</value>
  </data>
  <data name="NewEmailAddressInvalid" xml:space="preserve">
    <value>The new email address is invalid</value>
  </data>
  <data name="NewEmailAddressRequired" xml:space="preserve">
    <value>The new email address is required</value>
  </data>
</root>